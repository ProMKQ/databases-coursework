generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Project {
  id                       String                    @id @default(uuid())
  status                   String                    @db.VarChar(255)
  name                     String                    @db.VarChar(255)
  description              String                    @db.MediumText

  projectMembers           ProjectMember[]
  connectToProjectRequests ConnectToProjectRequest[]
  tasks                    Task[]
  roles                    Role[]

  @@map("project")
}

model ProjectMember {
  id                 String              @id @default(uuid())
  projectId          String              @map("project_id")
  userId             String              @map("user_id")

  project            Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  assignments        Assignment[]
  projectMemberRoles ProjectMemberRole[]
  taskComments       TaskComment[]

  @@map("project_member")
}

model Task {
  id           String        @id @default(uuid())
  name         String        @db.VarChar(255)
  description  String        @db.MediumText
  status       String        @db.VarChar(255)
  deadline     DateTime?     @db.DateTime(0)
  projectId    String        @map("project_id")

  project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assignments  Assignment[]
  taskComments TaskComment[]

  @@map("task")
}

model TaskComment {
  id              String        @id @default(uuid())
  text            String        @db.MediumText
  taskId          String        @map("task_id")
  projectMemberId String        @map("project_member_id")

  task            Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  projectMember   ProjectMember @relation(fields: [projectMemberId], references: [id], onDelete: Cascade)

  @@map("task_comment")
}

model User {
  id                       String                    @id @default(uuid())
  username                 String                    @db.VarChar(255)
  password                 String                    @db.VarChar(255)
  email                    String                    @db.VarChar(320)
  firstName                String                    @db.VarChar(255) @map("first_name")
  lastName                 String                    @db.VarChar(255) @map("last_name")
  avatar                   String?                   @db.MediumText
  blocked                  Boolean                   @default(dbgenerated("b'0'")) @db.Bit(1)

  projectMembers           ProjectMember[]
  supportRequests          SupportRequest[]
  connectToProjectRequests ConnectToProjectRequest[]

  @@map("user")
}

model Assignment {
  id              String        @id @default(uuid())
  taskId          String        @map("task_id")
  projectMemberId String        @map("project_member_id")

  task            Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
  projectMember   ProjectMember @relation(fields: [projectMemberId], references: [id], onDelete: Cascade)

  @@map("assignment")
}

model SupportRequest {
  id                     String                 @id @default(uuid())
  userId                 String                 @map("user_id")
  topic                  String                 @db.VarChar(255)
  description            String                 @db.MediumText

  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  supportRequestsAnswers SupportRequestAnswer[]

  @@map("support_request")
}

model SupportRequestAnswer {
  id               String         @id @default(uuid())
  feedback         String         @db.MediumText
  supportRequestId String         @map("support_request_id")

  supportRequest   SupportRequest @relation(fields: [supportRequestId], references: [id], onDelete: Cascade)

  @@map("support_request_answer")
}

model ConnectToProjectRequest {
  id        String  @id @default(uuid())
  userId    String  @map("user_id")
  projectId String  @map("project_id")

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("connect_to_project_request")
}

model Role {
  id                 String              @id @default(uuid())
  name               String              @db.VarChar(255)
  projectId          String              @map("project_id")

  project            Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)

  projectMemberRoles ProjectMemberRole[]
  grants             Grant[]

  @@map("role")
}

model ProjectMemberRole {
  id              String        @id @default(uuid())
  roleId          String        @map("role_id")
  projectMemberId String        @map("project_member_id")

  role            Role          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  projectMember   ProjectMember @relation(fields: [projectMemberId], references: [id], onDelete: Cascade)

  @@map("project_member_role")
}

model Grant {
  id         String @id @default(uuid())
  permission String @db.VarChar(255)
  roleId     String @map("role_id")

  role       Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("grant")
}